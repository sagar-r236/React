The hello React app which was developed in week 1 is not production ready, in order to make it production ready:

1. we have to minify our app
2. remove all the console log

In order to do it we use bundlers, some of the bundlers are weppack, vite, parcel etc. We use parcel!.

Best thing about React is that they don't enforce you to do in a certain way, you can install some 3rd party packages and use it.

Bundler : Development tool that combines many js file into a single one that is production ready.

What is parcel?

Parcel is a package (module) if we want to install package we need package manager we use npm for managing packages.

Package manager:

if we want to install 3rd party package we use package manager we use npm.

in order to initialize the package manager we type the command:
npm init -y
once we initialize npm we get package.json which contains the configuration of the app.

to install any packages we use the command:
npm install <package name>

npm install -D or --save-dev <package name> //for dev dependencies

Note : ^ is for minor upadates as well as for patches
       ~ is for only patches

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

After you install any package, you'll get package-lock.json file which contains the exact version of the packages that our project is using.

Installing react and react-dom

the command used to install react and ReactDom:
npm install react react-dom or npm i react react-dom

Note : nvm stands for node version manager used to change the version 

once you installed react and react-dom import to app.js and try to run using parcel

npx stands for npm package executable : we use it to execte npm packages in this case since we are using parcel we use command:

npx parcel <entry-point>

eg: npx parcel index.html

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

Parcel functionalities:

1. HMR - stands for hot module reloading which is just like a live server
2. File watcher algorithm watches the file and does HMR
3. cleaning console log
4. image optimisatiom
5. Caching
6. Compression
7. Compatible with older version of the browser
8. Consistent hashing algorithm 
9. Zero configuration


Transitive dependencies : dependencies having dependencies


Making Compatible with the various browsers:

when we install parcel it install a package called broserslist, so all we have to do is in package.json, create a broserslist attribute and
create an array which consist of query.

to write the what is query go to a website broserlist.dev and see the query composition.

eg : "broserlist": [
    "last 2 version"
  ]

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

Laying the foundation


Polyfill : a polyfill is a code which is a replacement for newer version of the code.

who does polyfill : babel


Tree shaking : Lets say you have a package and import it, while you're importing all the functionalities of the package will come to your
code, but you may be using only few functions therefore parcel imprt only functions which your are using and this is tree shaking.
basically removing unused code.

In the package.json file we have something "scripts" object where we can write alias for our command.

let say when are executing parcel we use to do something like npx parcel <entry_point>, so in order to shorten this in the scripts what 
we can do is 

scripts : {
  "start" : "parcel index.html"
}

and while executing we can type command like npm run start

so npx == npm run

----------------------------------------------------------------------------------------------------------------------

Removing console log

In order to remove console log we have to install babel-plugin-transform-remove-console so this will remove all the 
console.log in your project.

----------------------------------------------------------------------------------------------------------------------

Suppose we have a div created using react and we have two childs inside it, for each child we have to give a prop, with 
key as attribute and give some value to it.

reason why we should give it:
for efficiency, so react tracks of the element while re-rendering.

eg: 
const heading = React.createElement(
  "h1",
  {
    id: "header",
    className: "head",
    key : "2015"
  },
  "Hello World! from parcel"
);

const heading2 = React.createElement(
  "h2",
  {
    className: "head",
    key: "2014"
  },
  "heading 2"
)


const container = React.createElement(
  "div",
  {
    id : "container"  
  }, 
  [heading, heading2]
)


----------------------------------------------------------------------------------------------------------------------

How React.createElement works

when you code React.createElement it creates an object, then the object is converted to html code and put up on the DOM.

if we use React.createElement maintainance of code become hectic, so the JSX comes in,

JSX - jsx is a html like syntax in js, but it is not html in js 


----------------------------------------------------------------------------------------------------------------------

Component

In react we have two types of components:
1. Functional components
2. class components

Functional component : a functional component is nothing but a function which returns a piece of jsx or react element.

Always remember name of functional component starts with capital letter.

eg:

const HeaderComponent = () => {
  <h1>This is a header component</h1>
}

and if you want to render HeaderComponent you have to render using a syntax like this < HeaderComponent />

----------------------------------------------------------------------------------------------------------------------

How to use react element inside the react component, you just have to put your element inside the curly braces of the react component

eg : 

//React element

const paragraphToPutInsideComponnet = React.createElement(
  "h1",
  {},
  "This is a paragraph"
);

const ReactComponent = () => {
  (
    <h1>This is some paragraph</h1>
    <div>{paragraphToPutInsideComponnet}</div>
  );
}
